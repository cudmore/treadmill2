'''
20160229
treadmill

this is a master driver to run an experiment
this is NOT implemented to be a slave

if on Raspberry, turn on dio
	- dio to trigger a trial
	- dio on a new frame
	- dio to stop a trial
	
todo:
	include VideoServer.py
	not sure how to quickly trigger camera?
	if we are really master, then on startTrial we can just start the video
	- pass dio new frame to running pi camera
	
	- not sure if two python threads can share same dio pin (probably not)
	
	- maybe just make camera respond to dio start/stop/frame on its own set of three pins
		different from the start/stop/frame we are using here !!!
		
'''

import serial
import time
import os.path
from threading import Thread

import RPi.GPIO as GPIO

try:
	import picamera
except ImportError:
	print "\t=========================================================="
	print "\tWarning: treadmill.py did not find python library picamera"
	print '\t\tThis usually happens when code is not running on Raspberry Pi'
	print "\t=========================================================="

#this imports from sibling directory triggercamera
import sys
from os import path
sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )
from triggercamera import triggercamera

#i would prefer something like this but it requires **this to by run as a package 'python -m treadmill'
#from ..triggercamera import triggercamera
#import triggercamera.triggercamera
		
#
#eventually put this in a file
serialStr = '/dev/ttyACM0' #uno and teensy

options = {}
options['serial'] = {}
options['serial']['port'] = serialStr
options['serial']['baud'] = 115200 #57600
options['picamera'] = 0

'''
trial = {}
trial['startDate'] = ''
trial['startTime'] = ''

trial['filePath'] = ''
trial['fileName'] = ''
trial['trialNumber'] = 0

trial['epochNumber'] = 0

# user params
trialParam['preDur'] = 250
trialParam['postDur'] = 250
trialParam['epochDur'] = 1000
trialParam['numEpoch'] = 3
trialParam['useMotor'] = 'motorOn' #{motorOn, motorLocked, motorFree}
trialParam['motorDel'] = 100 #ms
trialParam['motorDur'] = 300 #ms
trialParam['motorSpeed'] = 100
trialParam['trialDur'] = trial['preDur'] + trial['numEpoch'] * trial['epochDur'] + trial['postDur']
'''

#end options
#
			
class treadmill():
	def __init__(self):
		print 'treadmill.treadmill() is starting, please wait ...'
		
		self.animalID = 'default'
				
		self.socketio = None
		
		self.ser = None
		
		if options['picamera']:
			print 'treadmill is using raspberry pi camera'
				
		#serial is blocking. we need our trial to run in a separate thread so we do not block user interface
		self.trialRunning = 0
		
		self.trial = {}
		self.trial['startDate'] = ''
		self.trial['startTime'] = ''

		self.trial['filePath'] = ''
		self.trial['fileName'] = ''
		self.trial['trialNumber'] = 0

		self.trial['epochNumber'] = 0

		# user params
		self.trialParam = {}
		self.trialParam['preDur'] = 250
		self.trialParam['postDur'] = 250
		self.trialParam['epochDur'] = 1000
		self.trialParam['numEpoch'] = 3
		self.trialParam['useMotor'] = 'motorOn' #{motorOn, motorLocked, motorFree}
		self.trialParam['motorDel'] = 100 #ms
		self.trialParam['motorDur'] = 300 #ms
		self.trialParam['motorSpeed'] = 100
		self.trialParam['trialDur'] = self.trialParam['preDur'] + self.trialParam['numEpoch'] * self.trialParam['epochDur'] + self.trialParam['postDur']

		'''
		thread = Thread(target=self.backgroundSerial_thread, args=())
		thread.daemon  = True; #as a daemon the thread will stop when *this stops
		thread.start()
		'''

		#save all serial data to file, set in setsavepath
		self.savepath = '/home/pi/video/'
		
		self.useCamera = 0
		if self.useCamera:
			self.camera = triggercamera.TriggerCamera()
		
		self.trialStopSignal = 0 #used by thread

		thread = Thread(target=self.backgroundTrial_thread, args=())
		thread.daemon  = True; #as a daemon the thread will stop when *this stops
		thread.start()
			
		GPIO.setwarnings(False)
		GPIO.setmode(GPIO.BCM)	 # set up BCM GPIO numbering  

		self.triggerOutPin = 21
		GPIO.setup(self.triggerOutPin, GPIO.OUT)

		self.trialRunningPin = 20
		GPIO.setup(self.trialRunningPin, GPIO.IN)
		GPIO.add_event_detect(self.trialRunningPin, GPIO.BOTH, callback=self.trialRunningPin_callback) #, bouncetime=10)

		self.motorOnPin = 16
		GPIO.setup(self.motorOnPin, GPIO.IN)
		GPIO.add_event_detect(self.motorOnPin, GPIO.BOTH, callback=self.motorOnPin_callback) #, bouncetime=10)

		
		#print 'treadmill.trial:', self.trial
		
	def trialRunningPin_callback(self, pin):
		pinIsUp = GPIO.input(pin)
		#print 'trialRunningPin_callback()', 'pin:', pin, 'pinIsUp:', pinIsUp
		if pinIsUp and not self.trialRunning:
			pass
			#self.startTrial()
		elif not pinIsUp and self.trialRunning:
			self.trialStopSignal = 1
			#self.stopTrial()
			
	def motorOnPin_callback(self, pin):
		pinIsUp = GPIO.input(pin)
		#print 'motorOnPin_callback()', 'pin:', pin, 'pinIsUp:', pinIsUp
		if self.trialRunning:
			if pinIsUp:
				pass
			else:
				pass
			
	'''
	def backgroundSerial_thread(self):
		#Background thread to continuously read serial. Used during a trial.
		while True:
			if self.trialRunning:
				str = self.ser.readline().rstrip()
				if len(str) > 0:
					print str
					self.NewSerialData(str)
			time.sleep(0.01)
	'''
	
	def backgroundTrial_thread(self):
		'''
		This needs to be thread because we do not want to call self.stopTrial()
		from within trialRunningPin_callback()
		'''
		while True:
			if self.trialRunning:
				if self.trialStopSignal:
					self.trialStopSignal=0
					self.stopTrial()
					print 'treadmill.backgroundTrial_thread() stopped trial'
			time.sleep(0.01)

	def bAttachSocket(self, socketio):
		print 'treadmill.bAttachSocket() attaching socketio:', socketio
		self.socketio = socketio

	'''
	def NewSerialData(self, str):
		'''
		we have received new serial data. pass it back to socketio
		special case is when we receive stopTrial
		'''
		#we want 'millis,event,val', if serial data does not match this then do nothing
		try:
			if len(str)>0 and self.socketio:
					#save to file
					#if self.trialRunning and self.filePtr:
					#	self.filePtr.write(str + '\n')
					
					#print "\t=== treadmill.NewSerialData sending serial data to socketio: '" + str + "'"
					if self.socketio:
						self.socketio.emit('serialdata', {'data': str})
					
					#stop trial
					parts = str.split(',')
					if len(parts) > 1:
						if parts[1] == 'startEpoch':
							if self.trialRunning:
								print '--->>> treadmill.NewSerialData() is starting epoch'
								self.startEpoch()
						if parts[1] == 'stopTrial':
							if self.trialRunning:
								print '--->>> treadmill.NewSerialData() is stopping trial'
								self.stopTrial()
		except:
			print "=============="
			print "ERROR: treadmill.NewSerialData()"
			print "=============="
	'''
	
	def startTrial(self):
		if self.trialRunning:
			print 'Warning: trial is already running'
			return 0
			
		self.trial['startDate'] = time.strftime("%Y%m%d")
		self.trial['startTime'] = time.strftime("%H%M%S")
		
		self.trial['trialNumber'] += 1
		self.trial['epochNumber'] = 0
		
		#do this at end of trial
		#self.newtrialfile()
		
		if self.socketio:
			self.socketio.emit('serialdata', {'data': "=== Trial " + str(self.trial['trialNumber']) + " ==="})
		
		
		#
		# start video here and then use GPIO trigger to start both arduino/scanimage
		if self.useCamera:
			self.camera.startArm()
			self.camera.startVideo()
		
		#
		# send out one digital pulse to trigger both (arduino and scope)
		
		GPIO.output(self.triggerOutPin, 1)
		GPIO.output(self.triggerOutPin, 0)
		#self.ser.write('startTrial\n')
		self.trialRunning = 1

		print 'treadmill.startTrial()'
		
		return 1
		
	'''
	def startEpoch(self):
		if not self.trialRunning:
			print 'warning: startEpoch() trial is not running'
			return 0
			
		self.trial['epochNumber'] += 1
				
		self.newepochfile(self.trial['epochNumber'])

		if self.socketio:
			self.socketio.emit('serialdata', {'data': "=== Epoch " + str(self.trial['epochNumber']) + " ==="})
		
		#self.ser.write('startTrial\n')
		#self.trialRunning = 1

		#print 'treadmill.startTrial()'
		
		return 1
	'''
		
	def stopTrial(self):
		self.trialRunning = 0

		if self.useCamera:
			self.camera.stopVideo()
			self.camera.stopArm()

		#stop arduino
		#self.ser.write('stopTrial\n')

		#save the trial file
		self.newtrialfile()

		print 'treadmill.stopTrial()'
		
	def newtrialfile(self):
		dateStr = self.trial['startDate']
		timeStr = self.trial['startTime']
		trialNumber = self.trial['trialNumber']
		datetimeStr = dateStr + '_' + timeStr

		sessionStr = ''
		sessionFolder = ''
		if self.animalID and not (self.animalID == 'default'):
			sessionStr = self.animalID + '_'
			sessionFolder = dateStr + '_' + self.animalID
		
		thisSavePath = self.savepath + dateStr + '/'
		if not os.path.exists(thisSavePath):
			os.makedirs(thisSavePath)
		thisSavePath += sessionFolder + '/'
		if not os.path.exists(thisSavePath):
			os.makedirs(thisSavePath)
		
		trialFileName = sessionStr + datetimeStr + '_t' + str(trialNumber) + '.txt'
		trialFilePath = thisSavePath + trialFileName
		
		self.trial['filePath'] = trialFilePath
		self.trial['fileName'] = trialFileName
		
		filePtr = open(trialFilePath, 'w')

		filePtr.write('date='+dateStr+';')
		filePtr.write('time='+timeStr+';')
		
		stateList = self.talktoserial('p')		
		for state in stateList:
			filePtr.write(state + ';')
			
		filePtr.write('\n')
		
		stateList = self.talktoserial('d')
		for line in stateList:
			filePtr.write(line + '\n')
			
		filePtr.close()
		
	def settrial2(self,trialDict):
		print 'treadmill.settrial2()'

		self.ser = serial.Serial(options['serial']['port'], options['serial']['baud'], timeout=0.25)

		for key, value in trialDict.iteritems():
			#print key, value
			self.settrial(key, value)
			time.sleep(0.01)

		self.ser.close()
		self.ser = None
			
	def settrial(self, key, val):
		'''
		set value for *this
		send serial to set value on arduino
		'''
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		#print "=== treadmill.settrial() key:'" + key + "' val:'" + val + "'"
		if key in self.trial:
			self.trial[key] = val
			serialCommand = 'settrial,' + key + ',' + val 
			serialCommand = str(serialCommand)
			print "\ttreadmill.settrial() writing to serial '" + serialCommand + "'"
			self.ser.write(serialCommand + '\n')
		else:
			print '\tERROR: treadmill:settrial() did not find', key, 'in trial dict'

	def talktoserial(self, this):
		#open serial
		self.ser = serial.Serial(options['serial']['port'], options['serial']['baud'], timeout=0.25)
		
		time.sleep(.02)
		
		throwout = self.emptySerial()
		
		if this == 'd': #dump trial
			self.ser.write('d\n')
			theRet = self.emptySerial()
		if this == 'p': #print params
			self.ser.write('p\n')
			theRet = self.emptySerial()
		if this == 'v': #version
			self.ser.write('v\n')
			theRet = self.emptySerial()
		
		#close serial
		self.ser.close()
		self.ser = None
		
		return theRet
		
	def updatetrial(self):
		numEpoch = long(self.trialParam['numEpoch'])
		epochDur = long(self.trialParam['epochDur'])
		totalDur = numEpoch * epochDur
		print 'updatetrial() set trialDur=', totalDur
		self.trialParam['trialDur'] = str(totalDur)
		
	'''
	#
	# Arduino attached to raspberry via USB
	#
	def GetArduinoState(self):
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		#parameters
		#if self.socketio:
		#	self.socketio.emit('serialdata', {'data': "=== Arduino State ==="})
		
		stateList = self.talktoserial('p')
				
		#if self.socketio:
		#	self.socketio.emit('serialdata', {'data': "=== Done Arduino State ==="})

		#last trial
		#if self.socketio:
		#	self.socketio.emit('serialdata', {'data': "=== Arduino Trial ==="})
		
		#stateList2 = self.talktoserial('d')

		#if self.socketio:
		#	self.socketio.emit('serialdata', {'data': "=== Done Arduino Trial ==="})

		return stateList
	'''
		
	def emptySerial(self):
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		theRet = []
		line = self.ser.readline()
		i = 0
		while line:
			line = line.rstrip()
			theRet.append(line)
			self.NewSerialData(line)
			line = self.ser.readline()
			i += 1
		return theRet
		
	def setserialport(self, newPort):
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		if os.path.exists(newPort) :
			print 'setserialport() port', newPort, 'exists'
			options['serial']['port'] = newPort
			return 1
		else:
			print 'setserialport() port', newPort, 'does not exist'
			return 0
			
	def checkserialport(self):
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		port = options['serial']['port']
		print 'checking', port
		if os.path.exists(port) :
			print 'exists'
			return 1, port
		else:
			print 'does not exist'
			return 0, port
			
	def checkarduinoversion(self):
		if self.trialRunning:
			print 'warning: trial is already running'
			return 0

		self.talktoserial('v')
		#self.ser.write('v\n')
		#self.emptySerial()
		
	def SavePath(self, str=''):
		if str:
			self.savepath = str
		return self.savepath

